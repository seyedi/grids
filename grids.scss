$grid_num: 12 !default;

$mobile: 30em !default;
$tablet: 46.25em !default;
$desktop: 61.25em !default;
$wide: 81.25em !default;

$gap: 0.01em !default;

$mobile-max: $mobile - $gap;
$tablet-max: $tablet - $gap;
$desktop-max: $desktop - $gap;
$wide-max: $wide - $gap;

// The space between columns.
$grid_gutter: .5em !default;

.inner-container {
  box-sizing: border-box;
  display: block;
  max-width: 64em;
  margin-left: auto;
  margin-right: auto;
  width: 100%;
}

.row {
  padding-left: 0;  // rest ul-type paddings
  padding-right: 0; // rest ul-type paddings
  list-style: none; // remove ul-type markers

  min-height: 1px;  // fix layout when box is empty.
  box-sizing: border-box;
  *zoom: 1;         // Fix bug for IE 6/7 only

  .row {  // Nesting is avalable.
    margin-left: -$grid_gutter;
    margin-right: -$grid_gutter;
  }

  &:before, &:after {
    content: ' ';   // The space content is one way to avoid an Opera bug when the `contenteditable` attribute is included anywhere else in the document. Otherwise it causes space to appear at the top and bottom of elements that receive the `clearfix` class.
    display: table; // The use of `table` rather than `block` is only necessary if using `:before` to contain the top-margins of child elements.
  }

  &:after {
    clear: both;
  }

  &.row-collapse {
    @media all and (min-width: $tablet) {
      margin: 0;

      .col {
        padding-right: 0;
        padding-left: 0;
      }
    }
  }
}

.col {
  box-sizing: border-box;
  padding-left: $grid_gutter;
  padding-right: $grid_gutter;
}

@function grid($n) {
  @return $n * (100%/$grid_num);
}

@for $i from 1 through $grid_num {
  .w#{$i} {
    width: grid($i);
  }
}

// T for Tablet screens
@media all and (min-width: $tablet) {
  @for $i from 1 through $grid_num {
    .wt#{$i} {
      width: grid($i);
    }
  }
}

// D for Desktop screens
@media all and (min-width: $desktop) {
  @for $i from 1 through $grid_num {
    .wd#{$i} {
      width: grid($i);
    }
  }
}

// W for Wide screens
@media all and (min-width: $wide) {
  @for $i from 1 through $grid_num {
    .ww#{$i} {
      width: grid($i);
    }
  }
}


.float-start {
  float: left;

  [dir="rtl"] & {
    float: right;
  }
}

.float-end {
  float: right;

  [dir="rtl"] & {
    float: left;
  }
}
